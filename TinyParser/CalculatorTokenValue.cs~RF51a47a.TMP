// Licensed under the MIT license. See LICENSE file.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml;
using System.IO;

namespace TinyParser
{
	/// <summary>
	/// 
	/// </summary>
	class CalculatorTokenValue
		: CalculatorToken
	{
		#region Fields

		int _mType;
		float _mValue;
		string _mString;

        #endregion

        #region Properties

        #endregion

        #region Constructors

		/// <summary>
		/// 
		/// </summary>
		/// <param name="value"></param>
		public CalculatorTokenValue(Calculator calculator, float value)
			: base(calculator)
		{
			_mValue = value;
			_mType = 0;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="value"></param>
		public CalculatorTokenValue(Calculator calculator, string value)
			: base(calculator)
		{
			_mString = value;
			_mType = 1;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="el"></param>
		/// <param name="option"></param>
		public CalculatorTokenValue(Calculator calculator, XmlNode el, SaveOption option)
			: base(calculator)
		{
			Load(el, option);
		}

        /// <summary>
        /// 
        /// </summary>
        /// <param name="br"></param>
        /// <param name="option"></param>
        public CalculatorTokenValue(Calculator calculator, BinaryReader br, SaveOption option)
            : base(calculator)
        {
            Load(br, option);
        }

        #endregion

        #region Methods

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public override float Evaluate()
		{
			return _mValue;
		}

		#region Save / Load

		/// <summary>
		/// 
		/// </summary>
		/// <param name="el"></param>
		/// <param name="option"></param>
		public override void Save(XmlNode el, SaveOption option)
		{
			XmlNode node = (XmlNode)el.OwnerDocument.CreateElement("Node");
			el.AppendChild(node);
            node.AddAttribute("type", ((int)CalculatorTokenType.Value).ToString());

            string value = _mType == 0 ? _mValue.ToString() : _mString;

            XmlNode valueNode = (XmlNode)el.OwnerDocument.CreateElementWithText("Value", value);
            valueNode.AddAttribute("type", _mType.ToString());
			node.AppendChild(valueNode);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="el"></param>
		/// <param name="option"></param>
		public override void Load(XmlNode el, SaveOption option)
		{
			_mType = int.Parse(el.SelectSingleNode("Value").Attributes["type"].Value);
			if (_mType == 0)
			{
				_mValue = float.Parse(el.SelectSingleNode("Value").InnerText);
			}
			else
			{
				_mString = el.SelectSingleNode("Value").InnerText;
			}
		}

        /// <summary>
        /// 
        /// </summary>
        /// <param name="el_"></param>
        /// <param name="option"></param>
        public override void Save(BinaryWriter bw, SaveOption option)
        {
            bw.Write((int)CalculatorTokenType.Value);
            string value = _mType == 0 ? _mValue.ToString() : _mString;
            bw.Write(value);
            bw.Write(_mType);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="el_"></param>
        /// <param name="option"></param>
        public override void Load(BinaryReader br, SaveOption option)
        {
            _mType = br.ReadInt32();

            if (_mType == 0)
            {
                _mValue = float.Parse(br.ReadString());
            }
            else
            {
                _mString = br.ReadString();
            }
        }

		#endregion

        #endregion
	}
}
